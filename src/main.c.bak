#include <nordic/nrfx/hal/nrf_clock.h>
#include <nordic/nrfx/hal/nrf_timer.h>
#include <nordic/nrfx/hal/nrf_gpio.h>
#include <nordic/nrfx/hal/nrf_gpiote.h>
#include <nordic/nrfx/hal/nrf_ppi.h>

#include <stdint.h>

NRF_TIMER_Type *servo_timer = NRF_TIMER1;
uint32_t pins[1] = {5};
nrf_ppi_channel_t ppis[2] = {NRF_PPI_CHANNEL6, NRF_PPI_CHANNEL7};

int main() {

    // nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKSTART);
    // nrf_clock_hfclk_t clk_src;
    // while (!nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_HFCLK, &clk_src) ||
    //     (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    // ) {

    // }

    nrf_timer_task_trigger(servo_timer, NRF_TIMER_TASK_STOP);
    nrf_timer_task_trigger(servo_timer, NRF_TIMER_TASK_CLEAR);
    nrf_timer_bit_width_set(servo_timer, NRF_TIMER_BIT_WIDTH_16);
    nrf_timer_mode_set(servo_timer, NRF_TIMER_MODE_TIMER);
    nrf_timer_frequency_set(servo_timer, NRF_TIMER_FREQ_1MHz); // 1us resolution
    // nrf_timer_frequency_set(servo_timer, NRF_TIMER_FREQ_250kHz); // debug

    //nrf_timer_int_enable(servo_timer, NRF_TIMER_INT_COMPARE3_MASK);

    nrf_timer_shorts_enable(servo_timer, NRF_TIMER_SHORT_COMPARE3_CLEAR_MASK);

    nrf_timer_cc_set(servo_timer, NRF_TIMER_CC_CHANNEL3, 20000);

    nrf_gpio_cfg_output(pins[0]);
    size_t gpiote_ch = 0;

    nrf_gpiote_task_configure(NRF_GPIOTE, gpiote_ch,
        pins[0], NRF_GPIOTE_POLARITY_TOGGLE, NRF_GPIOTE_INITIAL_VALUE_LOW
    );
    nrf_gpiote_task_enable(NRF_GPIOTE, gpiote_ch);
    nrf_ppi_channel_endpoint_setup(
        NRF_PPI, ppis[0],
        nrf_timer_event_address_get(
            servo_timer, nrf_timer_compare_event_get(0)),
        nrf_gpiote_task_address_get(
            NRF_GPIOTE, nrf_gpiote_clr_task_get(gpiote_ch))
    );
    nrf_ppi_channel_enable(NRF_PPI, ppis[0]);

    nrf_ppi_channel_endpoint_setup(
        NRF_PPI, ppis[1],
        nrf_timer_event_address_get(servo_timer, NRF_TIMER_EVENT_COMPARE3),
        nrf_gpiote_task_address_get(
            NRF_GPIOTE, nrf_gpiote_set_task_get(gpiote_ch))
    );
    nrf_ppi_channel_enable(NRF_PPI, ppis[1]);

    nrf_timer_cc_set(servo_timer, NRF_TIMER_CC_CHANNEL0, 1200);  // 1200us

    nrf_timer_task_trigger(servo_timer, NRF_TIMER_TASK_START);

    while(1) {

    }

    return 0;
}
